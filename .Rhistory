download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
linMod <- lm(tip ~ total_bill, data = tips)
summary(linMod)
plotModel(linMod)
beta_0 <- coef(linMod)["(Intercept)"]  # Grundtrinkgeld
tips$delta_tip <- tips$tip - beta_0    # wird abgezogen
linModDelta <- lm(delta_tip ~ total_bill, data = tips)
summary(linModDelta)
plotModel(linMod)
plotModel(linModDelta)
plotModel(linModDelta)
blogdown:::serve_site()
length(tips$total_bill)
length(tips$total_bill)
n(tips)
n()
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
beta_total_bill <- coef(linModDelta)["total_bill"]
tip$error_tip <- tip$delta_tip - beta_total_bill * tip$total_bill
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- tips$delta_tip - beta_total_bill * tips$total_bill
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- tips$delta_tip - beta_total_bill * tips$total_bill
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- (tips$delta_tip - beta_total_bill * tips$total_bill)
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- (tips$delta_tip - beta_total_bill * tips$total_bill)
view(tips)
View(tips)
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError <- lm(delta_error ~ total_bill, data = tips)
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError <- lm(delta_tip ~ total_bill, data = tips)
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError <- lm(error_tip ~ total_bill, data = tips)
summary(linModError)
plotModel(linModError)
xyplot(residuals(linMod) ~fitted(linMod))
histogramm(residuals(linMod) ~ fitted(linMod))
histogram(residuals(linMod) ~ fitted(linMod))
histogram( ~residuals(linMod))
xyplot(residuals(linMod) ~ fitted(linMod), l=0)
xyplot(residuals(linMod) ~ fitted(linMod))
histogram( ~residuals(linMod), nint=9)
histogram( ~residuals(linMod), nint=19)
favstats(~residuals(linMod))
histogram( ~residuals(linMod), nint=19)
favstats(~residuals(linMod))
1.019943 * 244/242
1.019943 * 244/243
1.019943 * sqrt(244/243)
sd(residuals(linMod))
1.019943 * sqrt(243/242)
linMod$residuals
linMod$residuals
sd(linMod$residuals)
x <- favstats(~residuals(linMod))
x <- favstats(~residuals(linMod))
x
x$n
tmp <- favstats(~residuals(linMod))
obs_n <- tmp$n
obs_sd <- tmp$sd
histogram( ~residuals(linMod), nint=19)
shapiro.test(~residuals(linMod))
shapiro.test( ~residuals(linMod) )
shapiro.test( residuals(linMod) )
qqnorm(residuals(linMod) )
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::update_meta_addin()
library(mosaic)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
install.packages(c("backports", "knitr"))
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
library(mosaic, warn.conflicts = FALSE, quietly = TRUE)
#download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
blogdown::build_site()
blogdown::build_site()
library(mosaic, warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE)
#download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
linMod <- lm(tip ~ total_bill, data = tips)
summary(linMod)
plotModel(linMod)
beta_0 <- coef(linMod)["(Intercept)"]  # Grundtrinkgeld
tips$delta_tip <- tips$tip - beta_0    # wird abgezogen
linModDelta <- lm(delta_tip ~ total_bill, data = tips)
summary(linModDelta)
plotModel(linModDelta)
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError <- lm(error_tip ~ total_bill, data = tips)
summary(linModError)
plotModel(linModError)
xyplot(residuals(linMod) ~ fitted(linMod))
favstats(~residuals(linMod))
tmp <- favstats(~residuals(linMod))
obs_n <- tmp$n
obs_sd <- tmp$sd
histogram( ~residuals(linMod), nint=19)
shapiro.test( residuals(linMod) )
qqnorm( residuals(linMod) )
blogdown::build_site()
blogdown::build_site()
install.packages(c("curl", "hunspell"))
blogdown::build_site()
blogdown::build_dir()
blogdown::serve_site()
blogdown::install_hugo(force=TRUE)
blogdown::serve_site()
install.packages(c("dbplyr", "digest", "DRR", "foreach", "ggformula", "git2r", "iterators", "lme4", "MASS", "MBESS", "OpenMx", "RCurl", "reshape2", "rgl", "rlang", "rprojroot", "slam", "sp", "StanHeaders", "testthat", "tibble", "tidytext", "visNetwork", "withr", "xts", "zoo"))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
devtools::install_github('rstudio/blogdown')
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::build_site()
blogdown:::build_site(local=TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::build_site(local=TRUE)
blogdown:::build_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown::hugo_server()
blogdown::hugo_version()
library(blogdown)
blogdown::hugo_build()
library(blogdown)
blogdown:::serve_site()
stop_server()
blogdown::build_dir()
blogdown::build_dir(force=TRUE)
devtools::session_info('blogdown')
install.packages('yaml')
install.packages("yaml")
install.packages('blogdown')
blogdown:::serve_site()
blogdown:::build_rmds()
blogdown:::build_dir(force = T)
hugo_serve()
blogdown::hugo_serve()
blogdown::hugo_server()
blogdown::hugo_build()
#, warning=FALSE, error=FALSE}
library(mosaic, warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE)
#download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
xyplot(tip ~ total_bill, data=tips, panel=panel.abline(v=mean(tips$tip)))
library(lattice)
xyplot(tip ~ total_bill, data=tips, panel=panel.abline(v=mean(tips$tip)))
library(lattice)
xyplot(tip ~ total_bill, data=tips, panel=function(x,y,...) = {panel.abline(v=mean(tips$tip))})
library(lattice)
xyplot(tip ~ total_bill, data=tips, panel=function(x,y,...){panel.abline(v=mean(tips$tip))})
library(lattice)
xyplot(tip ~ total_bill, data=tips, panel=function(x,y,...){panel.abline(h=mean(tips$tip))})
library(lattice)
xyplot(tip ~ total_bill, data=tips, panel=function(x,y,...){panel.average()})
library(lattice)
xyplot(tip ~ total_bill, data=tips, panel=function(x,y,...){panel.average(x,y)})
library(lattice)
xyplot(tip ~ total_bill, data=tips,
panel = function(...) {
type <- types[panel.number()]
horizontal <- horiz[panel.number()]
panel.xyplot(...,
type = type,
horizontal = horizontal);
panel.average(x,y)}
)
library(lattice)
xyplot(tip ~ total_bill, data=tips,
panel = function(...) {
panel.xyplot(...,
type = type,
horizontal = horizontal);
}
)
library(lattice)
xyplot(tip ~ total_bill, data=tips
)
library(lattice)
xyplot(
tip ~ total_bill, data=tips, type=c("p", "l")
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y, pch=19)
panel.abline(h = mean(y))
}
xyplot(
tip ~ total_bill, data=tips, type=c("p", "l"), panel=mypanel
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y, pch=19)
panel.abline(h = mean(y))
}
xyplot(
tip ~ total_bill, data=tips, panel=mypanel
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y, pch=19)
panel.abline(h = mean(y))
}
xyplot(
tip ~ total_bill, data=tips,
panel=mypanel,
main="Streudiagramm mit Mittelwert der Trinkgelder"
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y, pch=19)
panel.abline(h = mean(y),lwd=2, lty=2, col="darkgreen"))
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y)
panel.abline(h = mean(y), lwd=2, lty=2, col="darkgreen")
}
xyplot(
tip ~ total_bill, data=tips,
panel=mypanel,
main="Streudiagramm mit Mittelwert der Trinkgelder"
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y)
panel.abline(h = mean(y), lwd=2, lty=2, col="darkgreen")
panel.lmline(x, y, col="red", lwd=1, lty=2)
}
xyplot(
tip ~ total_bill, data=tips,
panel=mypanel,
main="Streudiagramm mit Mittelwert der Trinkgelder"
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y)
panel.abline(h = mean(y), lwd=2, lty=2, col="darkgreen")
panel.lmline(x, y, col="red", lwd=1, lty=2)
}
xyplot(
tip ~ total_bill, data=tips,
panel = mypanel,
main  = "Streudiagramm der Trinkgelder",
sub   = "Grün der Mittelwert, rot die Regressionsgerade"
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y)
panel.abline(h = mean(y), lwd=2, lty=2, col="darkgreen")
panel.lmline(x, y, col="red", lwd=1, lty=2)
}
xyplot(
tip ~ total_bill, data=tips,
panel = mypanel,
main  = "Streudiagramm der Trinkgelder",
sub   = "Grün der Mittelwert, rot die Regressionsgerade",
ylab  = "Trinkgeld",
xöab  = "Rechnungsbetrag"
)
library(lattice)
mypanel <- function(x, y) {
panel.xyplot(x, y)
panel.abline(h = mean(y), lwd=2, lty=2, col="darkgreen")
panel.lmline(x, y, col="red", lwd=1, lty=2)
}
xyplot(
tip ~ total_bill, data=tips,
panel = mypanel,
main  = "Streudiagramm der Trinkgelder",
sub   = "Grün der Mittelwert, rot die Regressionsgerade",
ylab  = "Trinkgeld",
xlab  = "Rechnungsbetrag"
)
tmp <- favstats(~residuals(linMod))
obs_n <- tmp$n
obs_sd <- tmp$sd
tmp$sd^2
1-(obs_sd^2 / var(tips$tip))*(obs_n-1)/(obs_n-1-1))
1-(obs_sd^2 / var(tips$tip))*(obs_n-1)/(obs_n-1-1))
1-(obs_sd^2 / var(tips$tip))*(obs_n-1)/(obs_n-1-1)
beta_total_bill <- coef(linModDelta)["total_bill"]
tips$error_tip <- (tips$tip - beta_0 - beta_total_bill * tips$total_bill)
linModError <- lm(error_tip ~ total_bill, data = tips)
summary(linModError)
summary(linMod)
coef(linMod)
x<- coef(linMod)
x
linMod$effects
linMod$qr
linMod$qr$qraux
linMod$qr$rank
linMod$qr$tol
linMod
summary(linMod)
x <- summary(linMod)
x$r.squared
r-sq <- summary(linMod)$r.squared
r.sq <- summary(linMod)$r.squared
blogdown:::serve_site()
#
knitr::opts_chunk$set(
echo = TRUE,
tidy = TRUE,
tidy.opts=list(
comment = TRUE,
blank = TRUE,
arrow = TRUE,
indent = 4,
width.cutoff=60),
brace.newline = FALSE
)
#
library(mosaic, warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
install.packages(c("arules", "arulesViz", "bindr", "broom", "callr", "car", "carData", "caret", "cluster", "earth", "effects", "foreign", "futile.options", "psych", "sourcetools", "stringi", "styler", "survey", "survival", "tokenizers", "tseries", "VennDiagram", "viridis", "withr", "XML", "xts"))
install.packages(c("arm", "bindrcpp", "curl", "ddalpha", "gmm", "gss", "hms", "httpuv", "igraph", "kernlab", "lambda.r", "lava", "lme4", "lmtest", "mapproj", "maps", "MASS", "Matrix", "nlme", "NMF", "OpenMx", "party", "pillar", "plogr", "plotmo", "pROC", "prodlim", "proxy", "quantmod", "R.oo"))
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
#
knitr::opts_chunk$set(
echo = TRUE,
tidy = TRUE,
tidy.opts=list(
comment = FALSE,
blank = TRUE,
arrow = TRUE,
indent = 4,
width.cutoff=60),
brace.newline = FALSE
)
#
library(mosaic, warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
library(mosaic)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
prop.test( ~ sex, success="Female", data=tips)
t.test(total_bill ~ time, data=tips)
prop.test(sex ~ time, success="Female", data=tips)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ suffle(time), success="Female", data=tips)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ suffel(time), success="Female", data=tips)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
histogram(~diffprop, data= NullVtlgAntwert)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
histogram( ~ diffprop, nint=100, data= NullVtlgAntwert)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
histogram( ~ diffprop, nint=25, data= NullVtlgAntwert)
#NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
bargraph( ~ diffprop, nint=25, data= NullVtlgAntwert)
#NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
histogram( ~ diffprop, nint=25, data= NullVtlgAntwert)
#NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
gf_histogram( ~ diffprop, nint=25, data= NullVtlgAntwert)
#NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
gf_histogram( ~ diffprop, nint=40, data= NullVtlgAntwert)
#NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
gf_histogram( ~ diffprop, nint=20, data= NullVtlgAntwert)
diffpropdach = diffprop(sex ~ time, success="Female", data=tips)
histogram( ~ diffprop, nint=25, data= NullVtlgAntwert) %>%
abline(v=diffpropdach)
diffpropdach = diffprop(sex ~ time, success="Female", data=tips)
gf_histogram( ~ diffprop, nint=25, data= NullVtlgAntwert) +
geom_vline(xintercept=diffpropdach)
diffpropdach = diffprop(sex ~ time, success="Female", data=tips)
gf_histogram( ~ diffprop, nint=25, data= NullVtlgAntwert) +
geom_vline(xintercept=diffpropdach, color="blue")
pvalue <- prop( ~ abs(diffprop) >= abs(diffpropdach), data = Nullvtlg)
pvalue <- prop( ~ abs(diffprop) >= abs(diffpropdach), data = NullVtlgAntwert)
pvalue
# Zur Reproduzierbakeit
set.seed(2009)
NullVtlgMittelwert <- do(10000) * diffmean(total_bill ~ shuffle(time), data=tips)
gf_histogram( ~ diffmean, nint=25, data=NullVtlgMittelwert)
# Zur Reproduzierbakeit
set.seed(2009)
#NullVtlgMittelwert <- do(10000) * diffmean(total_bill ~ shuffle(time), data=tips)
gf_histogram( ~ diffmean, nint=50, data=NullVtlgMittelwert)
diffmeandach = diffmean(total_bill ~ time, data = tips)
gf_histogram( ~ diffmean, nint = 25, data = NullVtlgMittelwert) +
geom_vline(xintercept = diffpropdach, color="blue")
# Zur Reproduzierbakeit
set.seed(2009)
NullVtlgMittelwert <- do(10000) * diffmean(total_bill ~ shuffle(time), data=tips)
gf_histogram( ~ diffmean, nint = 25, data = NullVtlgMittelwert)
diffmeandach = diffmean(total_bill ~ time, data = tips)
gf_histogram( ~ diffmean, nint = 25, data = NullVtlgMittelwert) +
geom_vline(xintercept = diffpropdach, color="blue")
diffmeandach = diffmean(total_bill ~ time, data = tips)
gf_histogram( ~ diffmean, nint = 25, data = NullVtlgMittelwert) +
geom_vline(xintercept = diffmeandach, color="blue")
pvalue_mw <- prop( ~ abs(diffmean) >= abs(diffmeandach), data = NullVtlgMittelwert)
pvalue_mw
#
knitr::opts_chunk$set(
echo = TRUE,
tidy = TRUE,
tidy.opts=list(
comment = FALSE,
blank = TRUE,
arrow = TRUE,
indent = 4,
width.cutoff=60),
brace.newline = FALSE
)
#
library(mosaic, warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE)
library(mosaicCore, quietly = TRUE)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
library(mosaic)
library(mosaicCore)
source("https://raw.githubusercontent.com/NMarkgraf/FastSimNullDistR/master/R/fastSimNullDistRMean.R")
source("https://raw.githubusercontent.com/NMarkgraf/FastSimNullDistR/master/R/fastSimNullDistRProp.R")
source("https://raw.githubusercontent.com/NMarkgraf/FastSimNullDistR/master/R/fastSimNullDistR_work.R")
set.seed(2009)
system.time(
NullDistMosaic_aw <- do(10000) * diffprop(smoker ~ shuffle(time), success="No", data=tips)
)
set.seed(2009)
system.time(
NullDistFSNDR_aw <- fastSimNullDistRProp(smoker ~ time, success="No", data=tips)
)
set.seed(2009)
system.time(
NullDistMosaic_mw <- do(10000) * diffmean(total_bill ~ shuffle(time), data=tips)
)
# fastSNDRM
set.seed(TheSeed)
blogdown:::serve_site()
# Zur Reproduzierbakeit
set.seed(2009)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
gf_histogram( ~ diffprop, nint=25, data= NullVtlgAntwert)
# Zur Reproduzierbakeit
set.seed(2009)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
gf_histogram( ~ diffprop, nint=50, data= NullVtlgAntwert)
# Zur Reproduzierbakeit
set.seed(2009)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
gf_histogram( ~ diffprop, nint=30, data= NullVtlgAntwert)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages(c("coda", "dplyr", "evaluate", "ggplot2", "htmlwidgets", "openssl", "ps", "psych", "questionr", "readr", "rlang", "rstudioapi", "shiny", "survival", "tidyr", "tidytext"))
install.packages(c("coda", "dplyr", "evaluate", "ggplot2", "htmlwidgets", "openssl", "ps", "psych", "questionr", "readr", "rlang", "rstudioapi", "shiny", "survival", "tidyr", "tidytext"))
install.packages("blogdown")
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
blogdown::install_hugo(force=T)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
