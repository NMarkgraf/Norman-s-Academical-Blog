# Funktion zur Berechnung der korrigierten absoluten
# Differenz zwischen beobachteten und erwarteten Werten
diffabsobsexpkor <- function(obs, exp) {
return(sum((abs(obs-exp))/exp))
}
# Absolute Abweichung der gemessenen Werte -- korrigiert
obs.abs <- diffabsobsexpkor(obs.tab, exp.tab)
# Erzeugen der Nullverteilung
NullVert  <- do(1000) * diffabsobsexpkor(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffabsobsexpkor, data=NullVert) %>%
gf_vline(xintercept = ~ obs.abs, color="red")
prop( ~ diffabsobsexpkor >= obs.abs, data=NullVert)
p.absobsexpkor <- prop( ~ diffabsobsexpkor >= obs.abs, data=NullVert)
# Funktion zur Berechnung der quadratischen
# Differenz zwischen beobachteten und erwarteten Werten
diffquad <- function(obs, exp) {
return(sum((obs-exp)^2))
}
# Quadratische Abweichung der gemessenen Werte
obs.abs <- diffquad(obs.tab, exp.tab)
# Erzeugen der Nullverteilung
NullVert  <- do(1000) * diffquad(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffquad, data=NullVert) %>%
gf_vline(xintercept = ~ obs.abs, color="red")
prop( ~ diffquad >= obs.abs, data=NullVert)
p.quad <- prop( ~ diffquad >= obs.abs, data=NullVert)
# Funktion zur Berechnung der korrigierten quadratischen
# Differenz zwischen beobachteten und erwarteten Werten
diffquadkor <- function(obs, exp) {
return(sum(((obs-exp)^2)/exp))
}
# Quadratische Abweichung der gemessenen Werte -- korrigiert
obs.abs <- diffquadkor(obs.tab, exp.tab)
# Erzeugen der Nullverteilung
NullVert  <- do(1000) * diffquadkor(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffquadkor, data=NullVert) %>%
gf_vline(xintercept = ~ obs.abs, color="red")
prop( ~ diffquadkor >= obs.abs, data=NullVert)
p.quadkor <- prop( ~ diffquadkor >= obs.abs, data=NullVert)
p <- c(p.absobsexp, p.absobsexpkor, p.quad, p.quadkor)
names(p) <- c("abs. Abweichung", "kor. abs. Abweichung", "quadr. Abweichung", "kor. quadr. Abweichung")
p
xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)
xst <- xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)
p <- c(p, xst$p.value)
names(p) <- c(names(p), "ChiQuadratTest")
p
library(mosaic)
library(mosaic)
set.seed(123)
n = 176
daten <- data.frame(
iphones.tagsüber.unbeachtet = sample(rep(c("1xtäglich","2xtäglich","3xtäglich"),n),n),
wetter.ist.gut = sample(rep(c("Ja","Nein"),n),n)
)
head(daten)
tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)
mosaicplot(wetter.ist.gut ~ iphones.tagsüber.unbeachtet, data=daten)
obs.tab <- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)
tally(~ wetter.ist.gut, data=daten)
tally(~ iphones.tagsüber.unbeachtet, data=daten)
mh.wig <-tally(~ wetter.ist.gut, data=daten)
mh.itu <- tally(~ iphones.tagsüber.unbeachtet, data=daten)
expectation.tab <- function(tab.obs) {
max.i <- length(tab.obs[1,])
max.j <- length(tab.obs[,1])
# Randhäufigkeiten
x <- rep(0, max.i)
for(i in 0:max.i) x[i] = sum(tab.obs[,i])
y <- rep(0, max.j)
for(j in 0:max.j) y[j] = sum(tab.obs[j,])
# Anzahl aller Beobachtungen
n = sum(tab.obs)
mtx <- c()
for(i in 0:max.i){
for(j in 0:max.j) {
mtx <- c(mtx, (x[i] * y[j] / n))
}
}
ret <- matrix(
mtx,#rep(0, length(tab.obs)),
nrow = max.j,
ncol = max.i
)
# Spalten und Zeilennamen übernehmen
colnames(ret) <- colnames(tab.obs)
rownames(ret) <- rownames(tab.obs)
return(ret)
}
obs.tab <- tally(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)
exp.tab <- expectation.tab(obs.tab)
obs.tab
exp.tab
sum(abs(obs.tab-exp.tab))
# Funktion zur Berechnung der absoluten Differenz zwischen
# beobachteten und erwarteten Werte
diffabsobsexp <- function(obs, exp) {
return(sum(abs(obs-exp)))
}
# Absolute Abweichung der gemessenen Werte
obs.abs <- diffabsobsexp(obs.tab, exp.tab)
# Erzeugen der Nullverteilung
NullVert  <- do(1000) * diffabsobsexp(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffabsobsexp, data=NullVert) %>%
gf_vline(xintercept = ~ obs.abs, color="red")
prop( ~ diffabsobsexp >= obs.abs, data=NullVert)
p.absobsexp <- prop( ~ diffabsobsexp >= obs.abs, data=NullVert)
# Funktion zur Berechnung der korrigierten absoluten
# Differenz zwischen beobachteten und erwarteten Werten
diffabsobsexpkor <- function(obs, exp) {
return(sum((abs(obs-exp))/exp))
}
# Absolute Abweichung der gemessenen Werte -- korrigiert
obs.abs <- diffabsobsexpkor(obs.tab, exp.tab)
# Erzeugen der Nullverteilung
NullVert  <- do(1000) * diffabsobsexpkor(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffabsobsexpkor, data=NullVert) %>%
gf_vline(xintercept = ~ obs.abs, color="red")
prop( ~ diffabsobsexpkor >= obs.abs, data=NullVert)
p.absobsexpkor <- prop( ~ diffabsobsexpkor >= obs.abs, data=NullVert)
# Funktion zur Berechnung der quadratischen
# Differenz zwischen beobachteten und erwarteten Werten
diffquad <- function(obs, exp) {
return(sum((obs-exp)^2))
}
# Quadratische Abweichung der gemessenen Werte
obs.abs <- diffquad(obs.tab, exp.tab)
# Erzeugen der Nullverteilung
NullVert  <- do(1000) * diffquad(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffquad, data=NullVert) %>%
gf_vline(xintercept = ~ obs.abs, color="red")
prop( ~ diffquad >= obs.abs, data=NullVert)
p.quad <- prop( ~ diffquad >= obs.abs, data=NullVert)
# Funktion zur Berechnung der korrigierten quadratischen
# Differenz zwischen beobachteten und erwarteten Werten
diffquadkor <- function(obs, exp) {
return(sum(((obs-exp)^2)/exp))
}
# Quadratische Abweichung der gemessenen Werte -- korrigiert
obs.abs <- diffquadkor(obs.tab, exp.tab)
# Erzeugen der Nullverteilung
NullVert  <- do(1000) * diffquadkor(tally(iphones.tagsüber.unbeachtet ~ shuffle(wetter.ist.gut), data=daten), exp.tab)
gf_histogram(~ diffquadkor, data=NullVert) %>%
gf_vline(xintercept = ~ obs.abs, color="red")
prop( ~ diffquadkor >= obs.abs, data=NullVert)
p.quadkor <- prop( ~ diffquadkor >= obs.abs, data=NullVert)
p <- c(p.absobsexp, p.absobsexpkor, p.quad, p.quadkor)
names(p) <- c("abs. Abweichung", "kor. abs. Abweichung", "quadr. Abweichung", "kor. quadr. Abweichung")
p
xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)
xst <- xchisq.test(iphones.tagsüber.unbeachtet ~ wetter.ist.gut, data=daten)
tmp <- names(p)
p <- c(p, xst$p.value)
names(p) <- c(tmp, "ChiQuadratTest")
p
fisher.test(obs.tab, alternative = "greater")
blogdown:::new_post_addin()
library(vroom)
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale:
tips.vroom <- vroom("tips.csv", locale = locale("de", decimal_mark = ","))
head(tips.vroom)
str(tips.vroom)
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale
# und klassische vorgegebene Spaltentypen
tips.vroom2 <- vroom("tips.csv",
locale = locale("de", decimal_mark = ","),
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
)
head(tips.vroom2)
str(tips.vroom2)
tips.csv2 <- read.csv2("tips.csv")
head(tips.csv2)
str(tips.csv2)
library(vroom)
url <- "https://goo.gl/whKjnl"
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale:
tips.vroom <- vroom(url, locale = locale("de", decimal_mark = ","))
head(tips.vroom)
str(tips.vroom)
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale
# und klassische vorgegebene Spaltentypen
tips.vroom2 <- vroom(url,
locale = locale("de", decimal_mark = ","),
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
)
head(tips.vroom2)
str(tips.vroom2)
# Readr
library(readr)
tips.readr <- readr::read_csv2("tips.csv")
head(tips.readr)
str(tips.readr)
# Mit Bordmitteln von R
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips.csv2 <- read.csv2("tips.csv")
head(tips.csv2)
str(tips.csv2)
View(tips.vroom)
View(tips.vroom2)
View(tips.readr)
View(tips.csv2)
View(tips.vroom)
vroom::vroom_str(tips.vroom2)
vroom::vroom_str(tips.vroom)
vroom
installed.packages()
installed.packages()$vroom
installed.packages()[vroom]
installed.packages()["vroom"]
ip <- installed.packages()
ip
installed.packages()[Package=="vroom"]
installed.packages()["Package"=="vroom"]
ip[]
ip["Package"]
ip["Packages"]
head(ip)
ip["Package"]
ip["Package",]
ip[,"Package"]
ip[,"Package"=="vroom"]
installed.packages(fields=c("Packages", "Release"))
installed.packages(fields=c("Packages", "Release")))
head(installed.packages(fields=c("Packages", "Release")))
head(installed.packages(fields=c("Packages", "Version")))
head(installed.packages()[, "Packages", "Version")))
head(installed.packages()[, c("Packages", "Version")])))
head(installed.packages()[, c("Packages", "Version")])
head(installed.packages()[, 1:3)])
installed.packages()[, 1:3)]
installed.packages()[, 1:3]
installed.packages()[, 1,3]
installed.packages()[, c(1,3)]
installed.packages()[vroom, c(1,3)]
installed.packages()["vroom", c(1,3)]
library(vroom)
url <- "https://goo.gl/whKjnl"
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale:
tips.vroom <- vroom(url, locale = locale("de", decimal_mark = ","))
head(tips.vroom)
str(tips.vroom)
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale
# und klassische vorgegebene Spaltentypen
tips.vroom2 <- vroom(url,
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
),
locale = locale("de", decimal_mark = ",")
)
head(tips.vroom2)
str(tips.vroom2)
# Readr
library(readr)
tips.readr <- readr::read_csv2(url)
head(tips.readr)
str(tips.readr)
# Readr
library(readr)
tips.readr2 <- readr::read_csv2(url,
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
)
head(tips.readr2)
str(tips.readr2)
# Mit Bordmitteln von R
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips.csv2 <- read.csv2("tips.csv")
head(tips.csv2)
str(tips.csv2)
library(vroom)
url <- "https://goo.gl/whKjnl"
mylocale <- locale("de", decimal_mark = ",", grouping_mark = ".")
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale:
tips.vroom <- vroom(url, locale = mylocale)
head(tips.vroom)
str(tips.vroom)
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale
# und klassische vorgegebene Spaltentypen
tips.vroom2 <- vroom(url,
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
),
locale = mylocale
)
head(tips.vroom2)
str(tips.vroom2)
# Readr
library(readr)
tips.readr <- readr::read_csv2(url)
head(tips.readr)
str(tips.readr)
# Readr
library(readr)
tips.readr2 <- readr::read_csv2(url,
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
)
head(tips.readr2)
str(tips.readr2)
# Mit Bordmitteln von R
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips.csv2 <- read.csv2("tips.csv")
head(tips.csv2)
str(tips.csv2)
library(vroom)
url <- "https://goo.gl/whKjnl"
mylocale <- locale("de", decimal_mark = ",", grouping_mark = ".")
mycols <- cols(
col_number(), # total_bill
col_number(), # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale:
tips.vroom <- vroom(url, locale = mylocale)
head(tips.vroom)
str(tips.vroom)
# Dezimalkommata und deutschsprachige Bezeichnungen mit locale
# und klassische vorgegebene Spaltentypen
tips.vroom2 <- vroom(url, col_types = mycols, locale = mylocale)
head(tips.vroom2)
str(tips.vroom2)
# Readr
library(readr)
tips.readr <- readr::read_csv2(url)
head(tips.readr)
str(tips.readr)
# Readr
library(readr)
tips.readr2 <- readr::read_csv2(url,
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
)
head(tips.readr2)
str(tips.readr2)
# Mit Bordmitteln von R
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips.csv2 <- read.csv2("tips.csv")
head(tips.csv2)
str(tips.csv2)
library(vroom)
# URL für die Quelle von tips.csv:
url <- "https://goo.gl/whKjnl"
# Locale auf Deutsche Sprache, Dezimalkomma und Gruppierungspunkte setzen
mylocale <- locale("de", decimal_mark = ",", grouping_mark = ".")
# Spaltentypen ggf. vorgeben:
mycols <- cols(
col_number(),  # total_bill
col_number(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
# Laden mit vroom, Spaltentypen erraten, Locale auf mylocale
tips.vroom <- vroom(url, locale = mylocale)
head(tips.vroom)
str(tips.vroom)
# Laden mit vroom, Spaltentypen mycols, Locale auf mylocale
tips.vroom2 <- vroom(url, col_types = mycols, locale = mylocale)
head(tips.vroom2)
str(tips.vroom2)
# Readr
library(readr)
tips.readr <- readr::read_csv2(url)
head(tips.readr)
str(tips.readr)
# Readr
library(readr)
tips.readr2 <- readr::read_csv2(url,
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
)
head(tips.readr2)
str(tips.readr2)
# Mit Bordmitteln von R
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips.csv2 <- read.csv2("tips.csv")
head(tips.csv2)
str(tips.csv2)
View(tips.vroom2)
str(tips.vroom2)
size(tips.vroom2)
length(tips.vroom2)
size(tips.vroom2)
class(tips.vroom2)
ls(tips.vroom2)
ls.str(tips.vroom2)
str(tips.vroom2)
object.size(tips.vroom2)
object.size(tips.vroom)
library(vroom)
# URL für die Quelle von tips.csv:
url <- "https://goo.gl/whKjnl"
# Locale auf Deutsche Sprache, Dezimalkomma und Gruppierungspunkte setzen
mylocale <- locale("de", decimal_mark = ",", grouping_mark = ".")
# Spaltentypen ggf. vorgeben:
mycols <- cols(
col_number(),  # total_bill
col_number(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
# Laden mit vroom, Spaltentypen erraten, Locale auf mylocale
tips.vroom <- vroom(url, locale = mylocale)
head(tips.vroom)
str(tips.vroom)
object.size(tips.vroom)
# Laden mit vroom, Spaltentypen mycols, Locale auf mylocale
tips.vroom2 <- vroom(url, col_types = mycols, locale = mylocale)
head(tips.vroom2)
str(tips.vroom2)
object.size(tips.vroom2)
# Readr
library(readr)
tips.readr <- readr::read_csv2(url)
head(tips.readr)
str(tips.readr)
object.size(tips.readr)
# Readr
library(readr)
tips.readr2 <- readr::read_csv2(url,
col_types = list(
col_double(),  # total_bill
col_double(),  # tip
col_factor(),  # sex
col_factor(),  # smoker
col_factor(),  # day
col_factor(),  # time
col_integer()  # size
)
)
head(tips.readr2)
str(tips.readr2)
# Mit Bordmitteln von R
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips.csv2 <- read.csv2("tips.csv")
head(tips.csv2)
str(tips.csv2)
object.size(tips.csv2)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site(); servr::daemon_stop(1)
servr::daemon_stop(2)
