printAllSE.poision <- function(m, lambda, bootstrapN=10000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# printAllSE.binom(n ,N, prop)
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot)")
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(m, lambda, bootstrapN=10000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# printAllSE.binom(n ,N, prop)
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", tmp$exakt-tmp$boot, " (Fehler) \n")
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(m, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# printAllSE.binom(n ,N, prop)
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", tmp$exakt-tmp$boot, " (Fehler) \n")
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(m, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# printAllSE.binom(n ,N, prop)
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(n, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# printAllSE.binom(n ,N, prop)
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(n, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# printAllSE.binom(n ,N, prop)
for(n in c(100, 500, 1000, 3000)) {
cat("\nn=", n, "\n")
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(n, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# printAllSE.binom(n ,N, prop)
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
cat("\nn=", n, "\n")
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(n, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# Binomialverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
cat("\nn=", n, "\n")
for(prob in c(1/2, 1/3, 1/4, 1/5, 1/6)) {
N <- floor(prop*n)
cat("N=",N, "\n")
tmp <- printAllSE.binom(n , N, prop)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
}
#
# Poisionverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
cat("\nn=", n, "\n")
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(n, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
n <- 100
N <- 70
prop <- 0.9
# Binomialverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
cat("\nn=", n, "\n")
for(prob in c(1/2, 1/3, 1/4, 1/5, 1/6)) {
N <- floor(prob*n)
cat("N=",N, "\n")
tmp <- printAllSE.binom(n , N, prob)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
}
#
# Poisionverteilte:
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
cat("\nn=", n, "\n")
for(lambda in c(1/2,1/3, 1/4, 1/5, 1/6)) {
tmp <- printAllSE.poision(n, lambda)
cat(lambda,": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler) \n")
}
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(n, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.normal <- function(n, mu=0, sigma=1, bootstrapN=1000, theta=mean) {
stipro <- rnorm(n, mu, sigma)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(sigma^2/n)
se.geschaetzt <- sqrt(var(stipro)/n)
se <- list(se.exakt, se.boot, se.geschaetzt)
names(se) <- c("exakt", "boot", "geschätzt")
return(se)
}
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
tmp <- printAllSE.normal(n)
cat("\nn=", n, tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", tmp$geschaetzt, "(geschätzt), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler (boot))", abs(tmp$exakt-tmp$geschaetzt),"(abs. Fehler (geschätzt)) \n")
}
printAllSE.binom <- function(n, N, prob, bootstrapN=1000, theta=mean) {
stipro <- rbinom(n, N, prob)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(N*prop*(1-prop))/sqrt(n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.poision <- function(n, lambda, bootstrapN=1000, theta=mean) {
stipro <- rpois(n, lambda)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(lambda/n)
se <- list(se.exakt, se.boot)
names(se) <- c("exakt", "boot")
return(se)
}
printAllSE.normal <- function(n, mu=0, sigma=1, bootstrapN=1000, theta=mean) {
stipro <- rnorm(n, mu, sigma)
bootvert <- do(bootstrapN) * theta(resample(stipro))
se.boot <- sd(bootvert$theta)
se.exakt <- sqrt(sigma^2/n)
se.geschaetzt <- sqrt(var(stipro)/n)
se <- list(se.exakt, se.boot, se.geschaetzt)
names(se) <- c("exakt", "boot", "geschaetzt")
return(se)
}
for(n in c(30, 50, 100, 200, 500, 1000, 3000)) {
tmp <- printAllSE.normal(n)
cat("\nn=", n, ": ", tmp$exakt, " (exakt), ", tmp$boot, " (boot), ", tmp$geschaetzt, "(geschätzt), ", abs(tmp$exakt-tmp$boot), " (abs. Fehler (boot))", abs(tmp$exakt-tmp$geschaetzt),"(abs. Fehler (geschätzt)) \n")
}
opt <- data.frame (mehr=1, salz=1, backpulver = 1)
opt
library(mosaic)
library(DiagrammeR)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
dot = '/opt/local/bin/dot'
))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(engine.path = list(
dot = '/opt/local/bin/dot'
))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
200 * 0.5 + sqrt{200}
200 * 0.5 + sqrt(200)
200 * 0.5 - sqrt(200)
qnorm(0.95)
qnorm(0.975)
200*0.5 + qnorm(0.975)*sqrt(200 * 0.5 * (1-0.5))
200*0.5 - qnorm(0.975)*sqrt(200 * 0.5 * (1-0.5))
m = 500
n = 500
k = 200
pl = 0.025
pr = 0.975
qhyper(pl, m, n, k)
m = 500
n = 500
k = 200
pl = 0.025
pr = 0.975
qhyper(pl, m, n, k)
qhyper(pr, m, n, k)
m = 500
n = 500
k = 200
pl = 0.025
pr = 0.975
qhyper(pl, m, n, k)
qhyper(pr, m, n, k, lower.tail=true)
m = 500
n = 500
k = 200
pl = 0.025
pr = 0.975
qhyper(pl, m, n, k)
qhyper(pr, m, n, k, lower.tail=FALSE)
m = 500
n = 500
k = 200
pl = 0.025
pr = 0.975
qhyper(pl, m, n, k)
qhyper(pl, m, n, k, lower.tail=FALSE)
m <- 500
n <- 500
k <- 200
pl <- 0.025
pr <- 0.975
iu <- qhyper(pl, m, n, k)
io <- qhyper(pr, m, n, k)
c(iu, io)
m <- 10; n <- 7; k <- 8
x <- 0:(k+1)
rbind(phyper(x, m, n, k), dhyper(x, m, n, k))
m <- 10; n <- 7; k <- 8
x <- 0:(k+1)
rbind(phyper(x, m, n, k), dhyper(x, m, n, k))
all(phyper(x, m, n, k) == cumsum(dhyper(x, m, n, k)))  # FALSE
## but error is very small:
signif(phyper(x, m, n, k) - cumsum(dhyper(x, m, n, k)), digits = 3)
m <- 500 # Anzahl der Mädchen
n <- 500 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
pl <- 0.025 # 2,5% als untere Grenze
pr <- 0.975 # 97,5% als obere Grenze
iu <- qhyper(pl, m, n, k) # Linke/untere Intervallgrenze
io <- qhyper(pr, m, n, k) # Rechte/obere Intervallgrenze
c(iu, io) # Ausgabe des (HSB-)Intervalls
phyper(0, 500,500,200)
phyper(1, 500,500,200)
phyper(0:1000, 500,500,200)
dhyper(0:1000, 500,500,200)
dhyper(0:200, 500,500,200)
phyper(0:200, 500,500,200)
dhyper(0:200, 500,500,200)
dhyper(0:200, 500,500,200) * 200
library(mosaic)
gf_dotplot( ~ dhyper(0:200, 500,500,200) * 200)
gf_dotplot( ~ phyper(0:200, 500,500,200) * 200)
gf_dotplot( ~ dhyper(0:200, 500,500,200) * 200, bins=200)
gf_histogram( ~ dhyper(0:200, 500,500,200) * 200)
gf_histogram( ~ phyper(0:200, 500,500,200) * 200)
gf_bar( ~ phyper(0:200, 500,500,200) * 200)
x <- dhyper(0:200, 500,500,200) * 200
cumsum(x[0:87])
x[0:87]
xx <- x[0:87]
cumsum(xx)
sum(xx)
sum(x[0:87])
sum(x[0:88])
x <- dhyper(0:200, 500,500,200)
sum(x[0,87])
sum(x[0:87])
sum(x[0:88])
sum(x[0:89])
sum(x[0:112])
sum(x[0:111])
sum(x[0:113])
sum(x[0:112])
m <- 500 # Anzahl der Mädchen
n <- 500 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
p <- dhyper(0:k, m, b, k)
m <- 500 # Anzahl der Mädchen
n <- 500 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
p <- dhyper(0:k, m, n, k)
p
p <- phyper(0:k, m, n, k)
p
m <- 500 # Anzahl der Mädchen
n <- 500 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
p <- dhyper(0:k, m, n, k)
sum(p[0:88])
sum(p[0:89])
sum(p[0:111])
sum(p[0:112])
m <- 500 # Anzahl der Mädchen
n <- 500 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
p <- dhyper(0:k, m, n, k)
sum(p[0:88])
sum(p[0:89])
sum(p[0:111])
sum(p[0:112])
sum(p[0:113])
m <- 500 # Anzahl der Mädchen
n <- 500 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
p <- dhyper(0:k, m, n, k)
# Werte für die linke/untere Intervallgrenzen:
sum(p[0:88])
sum(p[0:89])
# Werte für die rechte/untere Intervallgrenzen:
sum(p[0:111])
sum(p[0:112])
sum(p[0:113])
m <- 500 # Anzahl der Mädchen
n <- 500 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
p <- dhyper(0:k, m, n, k)
# Werte für die linke/untere Intervallgrenzen:
sum(p[0:88])
sum(p[0:89])
# Werte für die rechte/untere Intervallgrenzen:
sum(p[0:111])
sum(p[0:112])
sum(p[0:113])
# Werte für die rechte/untere Intervallgrenzen:
sum(p[0:110])
sum(p[0:111])
sum(p[0:112])
sum(p[0:113])
m <- 250 # Anzahl der Mädchen
n <- 250 # Anzahl der Jungen
k <- 200 # Umfang des Stichprobe
pl <- 0.025 # 2,5% als untere Grenze
pr <- 0.975 # 97,5% als obere Grenze
iu <- qhyper(pl, m, n, k) # Linke/untere Intervallgrenze
io <- qhyper(pr, m, n, k) # Rechte/obere Intervallgrenze
c(iu, io) # Ausgabe des (HSB-)Intervalls
pl <- 0.025 # 2,5% als untere Grenze
pr <- 0.975 # 97,5% als obere Grenze
iu <- qbinom(pl, 200, prop=0.5)
pl <- 0.025 # 2,5% als untere Grenze
pr <- 0.975 # 97,5% als obere Grenze
iu <- qbinom(pl, 200, prob=0.5)
io <- qbinom(pr, 200, prob=0.5)
c(iu, io) # Ausgabe des (HSB-)Intervalls
