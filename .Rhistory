library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
set.seed(2009)
n_max <- 100
step <- 5
start <- 5
nn <- c(5, 25, 100, 500)
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
set.seed(2009)
i = 1
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=",nn[i]))
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
set.seed(2009)
n_max <- 100
step <- 5
start <- 5
nn <- c(5, 25, 100, 500)
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
set.seed(2009)
i = 1
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
set.seed(2009)
n_max <- 100
step <- 5
start <- 5
nn <- c(5, 25, 100, 500)
set.seed(2009)
i = 1
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
set.seed(2009)
i = 2
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
set.seed(2009)
n_max <- 100
step <- 5
start <- 5
nn <- c(5, 25, 100, 500)
set.seed(2009)
i = 1
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
set.seed(2009)
i = 2
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="pink") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
set.seed(2009)
n_max <- 100
step <- 5
start <- 5
nn <- c(5, 25, 100, 500)
set.seed(2009)
i = 1
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
i = 2
set.seed(2009)
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
i = 3
set.seed(2009)
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
set.seed(2009)
n_max <- 100
step <- 5
start <- 5
nn <- c(5, 25, 100, 500)
set.seed(2009)
i = 1
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
i = 2
set.seed(2009)
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
i = 3
set.seed(2009)
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
i = 4
set.seed(2009)
u <- zscore(round(runif(nn[i], 0, 100), 3))
x <- zscore(round(rchisq(nn[i], 10, ncp= 5), 3))
y <- zscore(round(rnorm(nn[i], 50, 15), 3))
p <- gf_function(fun = pnorm, xlim=c(-3,3), col="red")
p1 <- p  %>%
gf_function(fun = ecdf(u), xlim=c(-3,3), col="blue") + ggtitle("U")
p2 <- p  %>%
gf_function(fun = ecdf(x), xlim=c(-3,3), col="green") + ggtitle("X")
p3 <- p  %>%
gf_function(fun = ecdf(y), xlim=c(-3,3), col="yellow") + ggtitle("Y")
grid.arrange(p1, p2, p3, ncol=3, top=textGrob(paste0("Vergleich der (empirischen) Verteilungsfunktionen n=", nn[i])))
install.packages("profvis")
install.packages(c("arules", "arulesViz", "bookdown", "broom", "cli", "data.table", "dendextend", "digest"))
install.packages(c("arules", "arulesViz", "bookdown", "broom", "cli", "data.table", "dendextend", "digest"))
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
install.packages(c("broom", "rmarkdown", "tinytex"))
blogdown:::serve_site()
blogdown::install_hugo(version = "0.60.1", force = TRUE)
blogdown:::serve_site()
blogdown::install_hugo(version = "0.60.1", force = TRUE)
hugo -v
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
servr::daemon_stop(2)
blogdown:::serve_site()
servr::daemon_stop(3)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown::serve_site()
servr::daemon_stop(2)
blogdown::build_site()
install.packages("provViz")
install.packages("profvis")
library(mosaic)
servr::daemon_stop(3)
servr::daemon_stop(2)
#
knitr::opts_chunk$set(
echo = TRUE,
tidy = TRUE,
tidy.opts=list(
comment = FALSE,
blank = TRUE,
arrow = TRUE,
indent = 4,
width.cutoff=60),
brace.newline = FALSE
)
#
#install.packages("profvis")
library(profvis)
library(mosaic, warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE)
library(mosaicCore, quietly = TRUE)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
# qqplot(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop)
gf_qq(NullDistFSNDR_aw$diffprop ~ NullDistMosaic_aw$diffprop)
df <- data_frame(
FSNDR = NullDistFSNDR_aw$diffprop,
Mosaic =NullDistMosaic_aw$diffprop
)
#
knitr::opts_chunk$set(
echo = TRUE,
tidy = TRUE,
tidy.opts=list(
comment = FALSE,
blank = TRUE,
arrow = TRUE,
indent = 4,
width.cutoff=60),
brace.newline = FALSE
)
#
#install.packages("profvis")
library(profvis)
library(mosaic, warn.conflicts = FALSE, quietly = TRUE, verbose = FALSE)
library(mosaicCore, quietly = TRUE)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
prop.test(sex ~ time, success="Female", data=tips)
t.test(total_bill ~ time, data=tips)
# Zur Reproduzierbakeit
set.seed(2009)
NullVtlgAntwert <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
gf_histogram( ~ diffprop, nint=25, data= NullVtlgAntwert)
diffpropdach = diffprop(sex ~ time, success = "Female", data = tips)
gf_histogram( ~ diffprop, nint = 25, data = NullVtlgAntwert) +
geom_vline(xintercept = diffpropdach, color="blue")
pvalue_aw <- prop( ~ abs(diffprop) >= abs(diffpropdach), data = NullVtlgAntwert)
pvalue_aw
# Zur Reproduzierbakeit
set.seed(2009)
NullVtlgMittelwert <- do(10000) * diffmean(total_bill ~ shuffle(time), data=tips)
gf_histogram( ~ diffmean, nint = 25, data = NullVtlgMittelwert)
diffmeandach = diffmean(total_bill ~ time, data = tips)
gf_histogram( ~ diffmean, nint = 25, data = NullVtlgMittelwert) +
geom_vline(xintercept = diffmeandach, color="blue")
pvalue_mw <- prop( ~ abs(diffmean) >= abs(diffmeandach), data = NullVtlgMittelwert)
pvalue_mw
library(profvis)  # ggf.: install.packages("profvis")
library(mosaic)
library(mosaicCore)
source("https://raw.githubusercontent.com/NMarkgraf/FastSimNullDistR/master/R/fastSimNullDistRMean.R")
source("https://raw.githubusercontent.com/NMarkgraf/FastSimNullDistR/master/R/fastSimNullDistRProp.R")
source("https://raw.githubusercontent.com/NMarkgraf/FastSimNullDistR/master/R/fastSimNullDistR_work.R")
set.seed(2009)
profvis({
NullDistMosaic_aw <- do(10000) * diffprop(sex ~ shuffle(time), success="Female", data=tips)
})
set.seed(2009)
profvis({
NullDistFSNDR_aw <- fastSimNullDistRProp(sex ~ time, success="Female", data=tips)
})
set.seed(2009)
profvis({
NullDistMosaic_mw <- do(10000) * diffmean(total_bill ~ shuffle(time), data=tips)
})
set.seed(2009)
profvis({
NullDistFSNDR_mw <- fastSimNullDistRMean(total_bill ~ time, data=tips)
})
df <- data_frame(
FSNDR  = NullDistFSNDR_aw$diffprop,
Mosaic = NullDistMosaic_aw$diffprop
)
df <- data_frame(
FSNDR  = NullDistFSNDR_aw$diffprop,
Mosaic = NullDistMosaic_aw$diffprop
)
gf_qq(FSNDR ~ Mosaic, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop | type, data=df)
gf_qq(~ diffprop, color = type, data=df)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type, size= ~ type data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type, size= ~ type, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type, size= ~ (1-type), data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type, size= ~ -type, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type, size = ~ type, data=df)
df <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df)
df <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type,  data=df)
df.diffprop <- data_frame(
diffprop  = c(NullDistFSNDR_aw$diffprop, NullDistMosaic_aw$diffprop),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffprop, color = ~ type, data=df.diffprop)
df.diffmean <- data_frame(
diffmean  = c(NullDistFSNDR_mw$diffmean, NullDistMosaic_mw$diffmean),
type  = c(rep("FSNDR", 10000),rep("mosaic", 10000))
)
gf_qq(~ diffmean, color = ~ type,  data=df.diffmean)
blogdown::build_site()
blogdown:::new_post_addin()
data(tips)
library(mosaic)
tips <- download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
library(mosaic)
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
tips <- read.csv2("tips.csv")
library(mosaic)
if (!file.exists("tips.csv")) {
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
}
tips <- read.csv2("tips.csv")
library(mosaic)
cor(total_bill ~ 1, data=tipstrain)
library(mosaic)
library(mosaic)
if (!file.exists("tips.csv")) {
download.file("https://goo.gl/whKjnl", destfile = "tips.csv")
}
tips <- read.csv2("tips.csv")
inspect(tips)
tips %>%
select(c("total_bill", "sex", "smoker", "day", "time", "size")) -> tips
trainings_anteil = 2/3
# n.train ist ein Index für alle Werte,
# die wir im Trainingsdatensatz haben wollen:
x.train <- sample(1:nrow(tips), floor(trainings_anteil*nrow(tips)))
# Trainingsdatensatz erstellen:
tipstrain <- slice(tips, x.train)
# Prüfdatensatz erstellen, also alles was
# nicht in den Trainingsdatensatz gekommen ist:
tipspruef <- slice(tips, -(x.train))
# Der Testdatensatz ist der Prüfdatensatz
# ohne die Variable total_bill:
tipspruef %>%
select(-total_bill) -> tipstest
gf_point(total_bill ~ jitter(size), color=~time, data=tipstrain)
gf_point(total_bill ~ day | time, color = ~ sex, data=tipstrain)
lm.null <- lm( total_bill ~ 1, data=tipstrain)
summary(lm.null)
cor(total_bill ~ 1, data=tipstrain)
lm.null <- lm( total_bill ~ 1, data=tipstrain)
lm.null
summary(lm.null)
lm.null$coefficients
blogdown::build_site()
